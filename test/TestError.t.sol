// // SPDX-License-Identifier: GPL-3.0-only
// pragma solidity ^0.8.0;

// import {Test} from "@forge-std/Test.sol";
// import {ITradingModule} from "@src/interfaces/ITradingModule.sol";

// interface State {
//     function fund() external view returns (address);
// }

// contract TestError is Test {
//     uint256 internal arbitrumFork;

//     address internal safe = 0x3a3B7991613E6433C0753D0B7c7251f92c490F40;
//     address internal operator = 0x5ed25671f65d0ca26d79326BF571f8AeaF856f00;
//     address internal module = 0x61e699f8f636917Cd9B2E4723756d5eF3257fd2c;
//     address internal beforeHook = 0x09991D5958f4d72812Aec65aF8b78969223D4799;
//     address internal uniRouter = 0xE592427A0AEce92De3Edee1F18E0157C05861564;

//     function setUp() public {
//         arbitrumFork = vm.createFork(vm.envString("ARBI_RPC_URL"));

//         vm.selectFork(arbitrumFork);
//         assertEq(vm.activeFork(), arbitrumFork);

//         vm.label(safe, "Safe");
//         vm.label(operator, "Operator");
//         vm.label(module, "Module");
//         vm.label(beforeHook, "BeforeHook");
//         vm.label(uniRouter, "UniRouter");
//     }

//     function testError() public {
//         assertEq(State(beforeHook).fund(), safe);

//         bytes memory payload =
//             hex"09c5eabe000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001b900c36442b4a4522e871399cd717abdd847ab11fe880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016488316456000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a3b7991613e6433c0753d0b7c7251f92c490f40000000000000000000000000000000000000000000000000000000006664fdb900000000000000";
//         vm.startPrank(operator, operator);
//         ITradingModule(module).execute(payload);
//         vm.stopPrank();
//     }
// }
